@model BusinessLayer.DTOModels.ContractDTO
@{
    ViewBag.Title = "Create Contract";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool IsOwnership = Model.ContractType == "Ownership";

}

<style>

    .custom-green {
        background-color: rgb(46,202,106);
        border: none;
    }

        .custom-green:hover {
            transform: scale(1.05);
            transition: transform 0.3s;
        }
</style>

<div class="container mt-5">
    <br />
    <br />
    <br />
    <br />
    <h2 class="text-center">Open New Contract</h2>

    @using (Html.BeginForm("GenerateInititalContractPDF", "Contract", FormMethod.Post, new { @class = "text-center mb-4" }))
        {
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.PropertyLocation)
                @Html.HiddenFor(model => model.PropertyName)
                @Html.HiddenFor(model => model.Occupantname)
                @Html.HiddenFor(model => model.ContractType)
                @Html.HiddenFor(model => model.TotalAmount)
                @Html.HiddenFor(model => model.Period)
                @Html.HiddenFor(model => model.CreatedOn)

            <button type="submit" class="btn custom-green text-white rounded px-5 py-2 transition duration-300" 
                    style="width: 100%; max-width: 300px;">
                Review Contract Terms
            </button>
        }



    <hr />
    <p class="text-muted text-center">Please fill in the details for the new contract.</p>


    @using (Html.BeginForm("Create", "Contract", FormMethod.Post, new { @id = "contractForm", @class = "row", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id )
        @Html.HiddenFor(model => model.PropertyId)
        @Html.HiddenFor(model => model.OccupantId)
        @Html.HiddenFor(model => model.Occupantname)
        @Html.HiddenFor(model => model.PropertyLocation)
        @Html.HiddenFor(model => model.PropertyName)
        @Html.HiddenFor(model => model.ContractType)
        @Html.HiddenFor(model => model.TotalAmount)
        @Html.HiddenFor(model => model.Period)


        <div class="col-md-6">
            <h4>Date and Financial Information</h4>

            <!-- Start Date: Editable field -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.StartDate, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @value = DateTime.Now.ToString("yyyy-MM-dd"), @type = "date", @min = DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd") })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
             @* <!-- Start Date: Month and Year -->
             <div class="form-group mb-3">
                 <label for="StartDateMonth" class="form-label">Starting In</label>
                 <div class="d-flex">
                     <select id="StartDateMonth" name="StartDateMonth" class="form-control me-2">
                         @for (int month = 1; month <= 12; month++)
                         {
                             var monthName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                             var isSelected = month == DateTime.Now.Month ? "selected" : "";
                             <option value="DateTime.Now.Month">@monthName</option>
                         }
                     </select>
                     <input type="number" id="StartDateYear" name="StartDateYear" class="form-control"
                            min="2024" value="@DateTime.Now.Year" required />

                 </div>
                 @Html.HiddenFor(model => model.StartDate)
                 @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
             </div>
 *@
            @{
                if (IsOwnership)
                {
                    <!-- End Date: Month and Year -->
                    <div class="form-group mb-3">                        
                        @Html.HiddenFor(model => model.EndDate)
                        @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                    </div>
                }
                else
                {
                    <!-- End Date: Month and Year -->
                    <div class="form-group mb-3">
                        @Html.LabelFor(model => model.EndDate, new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date", @min = DateTime.Now.AddMonths(6).ToString("yyyy-MM-dd") })
                        @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                    </div>
                    // <div class="form-group mb-3">
                    //     <label for="EndDateMonth" class="form-label">Ending In</label>
                    //     <div class="d-flex">
                    //         <select id="EndDateMonth" name="EndDateMonth" class="form-control me-2">
                    //             @for (int month = 1; month <= 12; month++)
                    //             {
                    //                 var monthName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                    //                 var isSelected = month == Model.EndDate.Month ? "selected" : "";
                    //                 <option value="@month" isSelected>@monthName</option>
                    //             }
                    //         </select>
                    //         <input type="number" id="EndDateYear" name="EndDateYear" class="form-control"
                    //                min="2024" value="@Model.EndDate.Year" required />
                    //     </div>
                    //     @Html.HiddenFor(model => model.EndDate)
                    //     @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                    // </div>
                }
            }
           


            <!--  Period: Display only -->
            <div class="form-group mb-3">
                <label for="Period" class="form-label">Period</label>
                @Html.HiddenFor(model => model.Period)
                <div class="form-control">@Model.Period Months</div>
            </div>

            <!-- Initial Payment: Display only -->
            <div class="form-group mb-3">
                <label for="InitialPayment" class="form-label">Initial Payment</label>
                <div class="form-control">
                    @(Model.InitialPayment?.ToString("C", new System.Globalization.CultureInfo("en-EG")) ?? "N/A")
                </div>
                @Html.HiddenFor(model => model.InitialPayment)
            </div>

            <!-- Recurring Payment Amount: Display only -->
            <div class="form-group mb-3">
                @{ 
                    if (IsOwnership)
                    {
                        <label for="RecurringPaymentAmount" class="form-label">Quarterly Payment</label>
                    }
                    else
                    {
                        <label for="RecurringPaymentAmount" class="form-label">Monthly Payment</label>
                    }
                }
                <div class="form-control">
                    @(Model.RecurringPaymentAmount?.ToString("C", new System.Globalization.CultureInfo("en-EG")) ?? "N/A")
                </div>
                @Html.HiddenFor(model => model.RecurringPaymentAmount)
            </div>

            <!-- Late Fee: Display only -->
            <div class="form-group mb-3">
                <label for="LateFee" class="form-label">Late Fee 10% (if applicable)</label>
                <div class="form-control">@Model.LateFee.ToString("C", new System.Globalization.CultureInfo("en-EG"))</div>
            </div>

            <!-- Total Amount: Display only -->
            <div class="form-group mb-3">
                <label for="TotalAmount" class="form-label">Total Contract Paymnets</label>
                <div class="form-control">@Model.TotalAmount?.ToString("C", new System.Globalization.CultureInfo("en-EG"))</div>
            </div>
        </div>

        <div class="col-md-6">
            <h4>Property Information</h4>

            <!-- Property Name: Display only -->
            <div class="form-group mb-3">
                <label for="PropertyName" class="form-label">Property</label>
                @Html.HiddenFor(model => model.PropertyLocation)
                <div class="form-control">@Model.PropertyName</div>
            </div>

            <!-- Property Location: Display only -->
            <div class="form-group mb-3">
                <label for="PropertyLocation" class="form-label">Location</label>
                @Html.HiddenFor(model => model.PropertyLocation)
                <div class="form-control">@Model.PropertyLocation</div>
            </div>

            <!-- Contract Type: Display only -->
            <div class="form-group mb-3">
                <label for="ContractType" class="form-label">Contract Type</label>
                <div class="form-control">@Model.ContractType</div>
            </div>

            <!-- Rooms: Display only -->
            <div class="form-group mb-3">
                <label for="Rooms" class="form-label">Rooms</label>
                @Html.HiddenFor(model => model.Rooms)
                <div class="form-control">@Model.Rooms</div>
            </div>

            <!-- Recurring Payment Frequency: Display only -->
            <div class="form-group mb-3">
                <label for="RecurringPaymentFrequency" class="form-label">Frequency</label>
                <div class="form-control">@Model.RecurringPaymentFrequency</div>
            </div>

            <!-- Contract Document: Upload field -->
            <div class="form-group mb-3">
                <label for="ContractDocument" class="form-label">Upload Sgned Contract </label>
                <input type="file" id="ContractDocument" name="ContractDocument" class="form-control" accept=".pdf" required />
            </div>
        </div>

        <div class="col-12 text-center mt-4">
            <button type="submit" class="btn custom-green text-white rounded px-5 py-2 transition duration-300"
                    style="width: 100%; max-width: 300px;">
                Confirm
            </button>
        </div>
    }
</div>
<br />
<br />
<br />
<br />

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    
    <script>
    $(document).ready(function () {
        $("#contractForm").submit(function (e) {
            e.preventDefault();

            var formData = new FormData();

            // Retrieve selected month and year for StartDate and EndDate
            var startDateMonth = $('#StartDateMonth').val();
            var startDateYear = $('#StartDateYear').val();
            var endDateMonth = $('#EndDateMonth').val();
            var endDateYear = $('#EndDateYear').val();

            // Logging the retrieved values for debugging
            console.log('Start Date Month:', startDateMonth);
            console.log('Start Date Year:', startDateYear);
            console.log('End Date Month:', endDateMonth);
            console.log('End Date Year:', endDateYear);

            // Create StartDate and EndDate by combining the month and year into a proper date string (yyyy-MM-dd)
            var startDate = startDateYear + '-' + (startDateMonth.length === 1 ? '0' + startDateMonth : startDateMonth) + '-01';
            var endDate = endDateYear + '-' + (endDateMonth.length === 1 ? '0' + endDateMonth : endDateMonth) + '-01';

            // Append form fields manually
            formData.append('ContractDocument', $('#ContractDocument')[0].files[0]);
            formData.append('PropertyId', $('#PropertyId').val());
            formData.append('OccupantId', $('#OccupantId').val());
            formData.append('PropertyLocation', $('#PropertyLocation').val());
            formData.append('PropertyName', '@Model.PropertyName');
            formData.append('Occupantname', '@Model.Occupantname');
            formData.append('Period', '@Model.Period');
            formData.append('TotalAmount', '@Model.TotalAmount');
            formData.append('ContractType', $('#ContractType').val());
            formData.append('StartDate', startDate);  // Append formatted startDate
            formData.append('EndDate', endDate);  // Append formatted endDate


            // Debugging FormData contents
            for (var pair of formData.entries()) {
                console.log(pair[0] + ': ' + pair[1]);
            }

              $.ajax({
                    url: '@Url.Action("Create", "Contract")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            alert('Contract created successfully!');
                            $('#ContractFilePath').val(response.filePath);
                            $('#downloadPdfBtn').prop('disabled', false);
                        } else {
                            alert('Error creating contract: ' + response.message);
                        }
                    },
                    error: function (error) {
                        alert('Error creating contract: ' + error.responseText);
                    }
                });
            });

        $("#downloadPdfBtn").click(function () {
            // Collect necessary data
            var contractId = $('#ContractId').val(); // Assuming you have a hidden field for ContractId
            var propertyId = $('#PropertyId').val(); // Assuming this is already being captured

            // Validate the existence of the contractId and propertyId
            if (contractId && propertyId) {
                $.ajax({
                    url: '@Url.Action("GenerateContractPDF", "Contract")',
                    type: 'GET',
                    data: {
                        contractId: contractId,
                        propertyId: propertyId
                    },
                    success: function (response) {
                        if (response.success) {
                            // If the response contains a file URL, initiate the download
                            window.location.href = response.fileUrl; // Adjust this based on your response structure
                        } else {
                            alert('Error generating PDF: ' + response.message);
                        }
                    },
                    error: function (error) {
                        alert('Error generating PDF: ' + error.responseText);
                    }
                });
            } else {
                alert('Missing required information for PDF generation.');
            }
        });

        });
    });
</script>

}
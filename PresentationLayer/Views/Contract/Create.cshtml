@model BusinessLayer.DTOModels.ContractDTO
@{
    ViewBag.Title = "Create Contract";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <br />
    <br />
    <br />
    <br />
    <h2 class="text-center">Open New Contract</h2>
    <hr />
    <p class="text-muted text-center">Please fill in the details for the new contract.</p>

    @using (Html.BeginForm("Create", "Contract", FormMethod.Post, new { @id = "contractForm", @class = "row", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.PropertyId)
        @Html.HiddenFor(model => model.OccupantId)
        @Html.HiddenFor(model => model.PropertyLocation)
        @Html.HiddenFor(model => model.ContractType)

        <div class="col-md-6">
            <h4>Date and Financial Information</h4>

            <!-- Start Date: Editable field -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.StartDate, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date", @min = DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd") })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>

            <!-- End Date: Editable field -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.EndDate, new { @class = "form-label" })
                @Html.TextBoxFor(model => model.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date", @min = DateTime.Now.AddMonths(6).ToString("yyyy-MM-dd") })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>

            <!-- Contract Type: Display only -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.ContractType, new { @class = "form-label" })
                <div class="form-control">@Model.ContractType</div>
            </div>

            <!-- Initial Payment: Display only -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.InitialPayment, new { @class = "form-label" })
                <div class="form-control">@(Model.InitialPayment?.ToString("C") ?? "N/A")</div>
            </div>

            <!-- Recurring Payment Amount: Display only -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.RecurringPaymentAmount, new { @class = "form-label" })
                <div class="form-control">@string.Format("{0:C}", Model.RecurringPaymentAmount)</div>
            </div>

            <!-- Recurring Payment Frequency: Display only -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.RecurringPaymentFrequency, new { @class = "form-label" })
                <div class="form-control">@Model.RecurringPaymentFrequency</div>
            </div>

            <!-- Late Fee: Display only -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.LateFee, new { @class = "form-label" })
                <div class="form-control">@Model.LateFee.ToString("C")</div>
            </div>

            <!-- PDF Upload field -->
            <div class="form-group mb-3">
                <label for="pdfFile" class="form-label">Upload Contract PDF</label>
                <input type="file" id="ContractDocument" name="ContractDocument" class="form-control" accept=".pdf" required />
            </div>

            <!-- Hidden field to store the uploaded file path -->
            @Html.HiddenFor(model => model.ContractDocument)
        </div>

        <div class="col-md-6">
            <h4>Property Information</h4>
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.PropertyLocation, new { @class = "form-label" })
                @Html.HiddenFor(model => model.PropertyLocation)
                <div class="form-control">@Model.PropertyLocation</div>
            </div>

            <!-- Add more property-related fields here as needed -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.Rooms, new { @class = "form-label" })
                @Html.HiddenFor(model => model.Rooms)
                <div class="form-control">@Model.Rooms</div>
            </div>
        </div>

        <div class="col-12 text-center mt-4">
            <button type="submit" class="btn btn-primary">Create Contract</button>
            <button type="button" id="downloadPdfBtn" class="btn btn-secondary" disabled>Download PDF</button>
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#contractForm").submit(function (e) {
                e.preventDefault();

                var formData = new FormData();

                // Manually append fields to FormData
                formData.append('ContractDocument', $('#ContractDocument')[0].files[0]);
                formData.append('PropertyId', $('#PropertyId').val());
                formData.append('OccupantId', $('#OccupantId').val());
                formData.append('StartDate', $('#StartDate').val());
                formData.append('EndDate', $('#EndDate').val());
                formData.append('ContractType', $('#ContractType').val());
                formData.append('PropertyLocation', $('#PropertyLocation').val());

                $.ajax({
                    url: '@Url.Action("Create", "Contract")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            alert('Contract created successfully!');
                            $('#ContractFilePath').val(response.filePath);
                            $('#downloadPdfBtn').prop('disabled', false);
                        } else {
                            alert('Error creating contract: ' + response.message);
                        }
                    },
                    error: function (error) {
                        alert('Error creating contract: ' + error.responseText);
                    }
                });
            });

            $("#downloadPdfBtn").click(function () {
                var filePath = $('#ContractFilePath').val();
                if (filePath) {
                    window.location.href = '@Url.Action("DownloadPdf", "Contract")' + '?filePath=' + encodeURIComponent(filePath);
                } else {
                    alert('No PDF file available for download.');
                }
            });
        });
    </script>
}
